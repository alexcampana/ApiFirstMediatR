// <auto-generated/>
#nullable enable

namespace {{ controller_namespace }}
{
    public sealed class {{ name }} : Microsoft.AspNetCore.Mvc.Controller
    {
        private readonly MediatR.IMediator _mediator;

        public {{ name }}(MediatR.IMediator mediator)
        {
            _mediator = mediator;
        }

        {%- for endpoint in endpoints %}
        
        /// <summary>
        {%- for description_line in endpoint.description %}
        /// {% unless forloop.first %}<br/>{% endunless %}{{ description_line }}
        {%- endfor %}
        /// </summary>
        {%- for parameter in endpoint.all_request_parameters %}
        /// <param name="{{ parameter.parameter_name }}">{{ parameter.description | join: "<br/>" }}</param>
        {%- endfor %}
        /// <returns>{{ endpoint.response.description | join: "<br/>" }}</returns>
        [Microsoft.AspNetCore.Mvc.Http{{ endpoint.operation_name }}("{{ endpoint.path }}")]
        [Microsoft.AspNetCore.Mvc.ProducesResponseType({% if endpoint.response.body_type != null %}typeof({{ endpoint.response.body_type }}), {% endif %}Microsoft.AspNetCore.Http.StatusCodes.{{ endpoint.response.http_status_code.status_code_reference }})]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult{% if endpoint.response.body_type != null %}<{{ endpoint.response.body_type }}>{% endif %}> {{ endpoint.name }}(
            {%- for parameter in endpoint.all_request_parameters -%}
                {{ parameter.attribute }}{{ parameter.data_type }}{%- if parameter.is_nullable -%}?{%- endif %} {{ parameter.parameter_name }}
            {%- unless forloop.last  %}, {% endunless -%}
            {%- endfor -%}
            {%- if endpoint.all_request_parameters.size != 0 -%}, {% endif -%}System.Threading.CancellationToken cancellationToken)
        {
            var request = new {{ request_namespace }}.{{ endpoint.mediator_request_name }}(
                {%- for parameter in endpoint.all_request_parameters -%}
                    {{ parameter.parameter_name }}
                {%- unless forloop.last  %}, {% endunless -%}
                {% endfor %});
            var response = await _mediator.Send(request, cancellationToken);
            return {{ endpoint.response.http_status_code.response_method }}(
                {%- if endpoint.response.endpoint_name != null -%}"{{ endpoint.response.endpoint_name }}", {% endif -%}
                {%- if endpoint.response.controller_name != null -%}"{{ endpoint.response.controller_name }}", {% endif -%}
                {%- if endpoint.response.route_maps != null -%}new {
                    {%- for route_map in endpoint.response.route_maps -%}
                        {{ route_map.key }} = {{ route_map.value }}
                    {%- unless forloop.last  %}, {% endunless -%}
                    {%- endfor -%}
                }, {% endif -%}
                {%- if endpoint.response.body_type != null %}response{% endif -%}
            );
        }
        {%- endfor %}
    }
}