// <auto-generated/>
using MediatR;
using Microsoft.AspNetCore.Mvc;
using {{ namespace }}.Dtos;
using {{ namespace }}.Requests;

namespace {{ namespace }}.Controllers
{
    [Route("[controller]")]
    public sealed class {{ name }} : Controller
    {
        private readonly IMediator _mediator;

        public {{ name }}(IMediator mediator)
        {
            _mediator = mediator;
        }

        {%- for endpoint in endpoints %}

        [Http{{ endpoint.operation_name }}("{{ endpoint.path }}")]
        public async Task<ActionResult> {{ endpoint.name }}(
            {%- for parameter in endpoint.all_request_parameters -%}
                {{ parameter.attribute }}{{ parameter.data_type }} {{ parameter.parameter_name }}{%- unless forloop.last  %}, {% endunless -%}
            {%- endfor -%}
            {%- if endpoint.all_request_parameters.size != 0 -%}, {% endif -%}CancellationToken cancellationToken)
        {
            var request = new {{ endpoint.mediator_request_name }}
            {
                {%- for parameter in endpoint.all_request_parameters %}
                {{ parameter.name }} = {{ parameter.parameter_name }}{%- unless forloop.last  %},{% endunless -%}
                {% endfor %}
            };

            var response = await _mediator.Send(request, cancellationToken);
            return Ok(response);
        }
        {%- endfor %}
    }
}