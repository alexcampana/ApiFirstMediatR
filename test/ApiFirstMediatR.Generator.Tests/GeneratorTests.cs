namespace ApiFirstMediatR.Generator.Tests;

public class GeneratorTests : TestBase
{
    [Fact]
    public void ValidAPISpec_GeneratesValidCode()
    {
        var code = "namespace Test;";
        var inputCompilation = CreateCompilation(code);

        var additionalTexts = new AdditionalTextYml("api_spec.yml", ApiSpec) as AdditionalText;

        var generator = new ApiSourceGenerator();
        var driver = CSharpGeneratorDriver
            .Create(generator)
            .AddAdditionalTexts(ImmutableArray.Create(additionalTexts))
            .RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation,
            out var diagnostics);
        
        Assert.Empty(diagnostics);
        
        var runResult = driver.GetRunResult();
        Assert.Single(runResult.Results);
        
        var generatedSources = runResult.Results.First().GeneratedSources;
        Assert.Equal(3, generatedSources.Length);

        var dtos = generatedSources.Where(g => g.HintName == "Dtos_HelloWorldDto.g.cs");
        Assert.Single(dtos);

        var mediatrRequests = generatedSources.Where(g => g.HintName == "MediatorRequests_GetHelloWorldQuery.g.cs");
        Assert.Single(mediatrRequests);

        var controllers = generatedSources.Where(g => g.HintName == "Controllers_ApiController.g.cs");
        Assert.Single(controllers);

        var dtoExpectedResult = CSharpSyntaxTree.ParseText(ExpectedDto);
        Assert.True(dtoExpectedResult.IsEquivalentTo(dtos.First().SyntaxTree));

        var mediatrExpectedResult = CSharpSyntaxTree.ParseText(ExpectedMediatorRequest);
        Assert.True(mediatrExpectedResult.IsEquivalentTo(mediatrRequests.First().SyntaxTree));

        var controllerExpectedResult = CSharpSyntaxTree.ParseText(ExpectedController);
        Assert.True(controllerExpectedResult.IsEquivalentTo(controllers.First().SyntaxTree));
    }
    
    private const string ApiSpec = @"openapi: 3.0.1
info:
  title: HelloWorld API
  version: v1
paths:
  /api/HelloWorld:
    get:
      tags:
        - HelloWorld
      operationId: GetHelloWorld
      description: Gets a HelloWorld Message
      parameters: []
      responses:
        200:
          description: Hello world!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorldDto'
components:
  schemas:
    HelloWorldDto:
      type: object
      properties:
        message:
          type: string
          nullable: true
security: []";

    private const string ExpectedDto = @"// <auto-generated/>
using System.Text.Json.Serialization;

namespace compilation.Dtos
{
    public class HelloWorldDto 
    {
        [JsonPropertyName(""message"")]
        public string? Message { get; set; }
    }
}";

    private const string ExpectedMediatorRequest = @"// <auto-generated/>
#nullable enable
using MediatR;
using compilation.Dtos;

namespace compilation.Requests
{
    /// <summary>
    /// Gets a HelloWorld Message
    /// </summary>
    /// <returns>Hello world!</returns>
    public sealed class GetHelloWorldQuery : IRequest<HelloWorldDto>
    {
        public GetHelloWorldQuery()
        {
        }
    }
}";

    private const string ExpectedController = @"// <auto-generated/>
#nullable enable
using MediatR;
using Microsoft.AspNetCore.Mvc;
using compilation.Dtos;
using compilation.Requests;

namespace compilation.Controllers
{
    [Route(""[controller]"")]
    public sealed class ApiController : Controller
    {
        private readonly IMediator _mediator;

        public ApiController(IMediator mediator)
        {
            _mediator = mediator;
        }
        
        /// <summary>
        /// Gets a HelloWorld Message
        /// </summary>
        /// <returns>Hello world!</returns>
        [HttpGet(""/api/HelloWorld"")]
        public async Task<ActionResult> GetHelloWorld(CancellationToken cancellationToken)
        {
            var request = new GetHelloWorldQuery();
            var response = await _mediator.Send(request, cancellationToken);
            return Ok(response);
        }
    }
}";
}